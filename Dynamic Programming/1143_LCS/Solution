/*
Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). 
A common subsequence of two strings is a subsequence that is common to both strings.
*/


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        
        int n = text1.length();
        int m = text2.length();
        
        int[][] memo = new int[n+1][m+1];
        
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                
                if (text1.charAt(i) == text2.charAt(j))
                {
                    memo[i + 1][j + 1] = 1 + memo[i][j];
                }
                else
                {
                    memo[i + 1][j + 1] = Math.max(memo[i][j + 1] , memo[i + 1][j]);
                }
            }
        }
        
        return memo[n][m];
    }
}
